@page "/Admin"
@using System.Diagnostics
@using Microsoft.EntityFrameworkCore
@using SSI.Trivia.Shared.DbContexts
@using SSI.Trivia.Shared.Models
@using SSI.Trivia.Shared.Components
@using SSI.Trivia.Shared.Interfaces
@using System.Text.Json
@using SSI.Trivia.Shared.Models.GenerationModels
@using SSI.Trivia.Shared.Services

@inject TriviaDbContext DbContext
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IOpenAITriviaService TriviaService
@inject IJSRuntime JSRuntime

<MudPaper Class="p-4" Elevation="0">
    <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-4">Manage Trivia</MudText>

    <!-- AI Trivia Generation -->
    <MudExpansionPanel Class="mb-4">
        <TitleContent>
            <MudText Typo="Typo.h6">Generate Trivia with AI</MudText>
        </TitleContent>
        <ChildContent>
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="TriviaCategory" 
                                 Label="Category" 
                                 Placeholder="Random, Sports, History, Science, etc." 
                                 Variant="Variant.Outlined" 
                                 Class="mb-3" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="TriviaQuestionCount" 
                                    Label="Number of Questions" 
                                    Min="1" Max="10" 
                                    Variant="Variant.Outlined" 
                                    Class="mb-3" />
                </MudItem>
                <MudItem xs="12">
                    <MudSwitch @bind-Value="IncludeTieBreaker" 
                              Color="Color.Primary" 
                              Label="Include tie-breaker question" />
                </MudItem>
                <MudItem xs="12">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              OnClick="GenerateTriviaQuestions" 
                              StartIcon="@Icons.Material.Filled.AutoAwesome" 
                              Disabled="@IsGenerating"
                              Class="mb-3">
                        @(IsGenerating ? "Generating..." : "Generate Trivia Questions")
                    </MudButton>
                    
                    @if (IsGenerating)
                    {
                        <MudProgressLinear Indeterminate="true" Class="mt-2" />
                    }
                    
                    @if (!string.IsNullOrEmpty(GenerationError))
                    {
                        <MudAlert Severity="Severity.Error" Class="mt-2">@GenerationError</MudAlert>
                    }
                </MudItem>
            </MudGrid>
        </ChildContent>
    </MudExpansionPanel>

    <!-- Add JSON Import section just after the AI generation section -->
    <MudExpansionPanel Class="mb-4">
        <TitleContent>
            <MudText Typo="Typo.h6">Import Trivia from JSON</MudText>
        </TitleContent>
        <ChildContent>
            <MudGrid>
                <MudItem xs="12">
                    <!-- Example Prompt Section -->
                    <MudExpansionPanel>
                        <TitleContent>
                            <MudText Typo="Typo.subtitle1">Show Example Prompt</MudText>
                        </TitleContent>
                        <ChildContent>
                            <MudPaper Class="pa-4 mb-3" Outlined="true">
                                <MudText Typo="Typo.body1" Class="mb-3">
                                    Generate 5 engaging trivia questions about random categories with 4 multiple-choice answers each.
                                    For each question, clearly indicate which answer is correct. 
                                    For the answers make sure the correct answers are spaced out randomly between all 4 options.

                                    Also include one tie-breaker question in the style of 'The Price is Right' where the answer is a specific number or amount.
                                    For this tie-breaker, provide the exact numerical answer.

                                    Format your response as JSON with the following structure:
                                </MudText>
                                <div class="d-flex justify-space-between align-center">
                                    <MudText Typo="Typo.body2" Style="font-family: monospace; white-space: pre-wrap;" Class="mud-text-primary">
                                        @($@"{{
                                        ""questions"": [
                                        {{
                                        ""questionText"": ""Question text here?"",
                                        ""answers"": [
                                        {{ ""text"": ""Answer 1"", ""isCorrect"": false }},
                                        {{ ""text"": ""Answer 2"", ""isCorrect"": true }},
                                        {{ ""text"": ""Answer 3"", ""isCorrect"": false }},
                                        {{ ""text"": ""Answer 4"", ""isCorrect"": false }}
                                        ]
                                        }}
                                        ],
                                        ""tieBreaker"": {{
                                        ""questionText"": ""How many X are there in Y?"",
                                        ""answer"": ""42""
                                        }}
                                        }}")
                                    </MudText>
                                    <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                                                   OnClick="CopyExamplePromptToClipboard"
                                                   Color="Color.Primary"
                                                   Size="Size.Small" />
                                </div>
                            </MudPaper>
                        </ChildContent>
                    </MudExpansionPanel>

                    <!-- JSON Input Area -->
                    <MudTextField @bind-Value="JsonInput"
                                  Label="Paste JSON Here"
                                  Placeholder="Paste your JSON trivia data here..."
                                  Lines="10"
                                  Variant="Variant.Outlined"
                                  Class="mt-3 mb-3"
                                  FullWidth="true" />

                    <div class="d-flex">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   OnClick="ImportJsonTrivia"
                                   Class="mr-2">
                            Import Trivia from JSON
                        </MudButton>

                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Error"
                                   OnClick="() => JsonInput = string.Empty">
                            Clear
                        </MudButton>
                    </div>

                    @if (!string.IsNullOrEmpty(JsonImportError))
                    {
                        <MudAlert Severity="Severity.Error" Class="mt-3">@JsonImportError</MudAlert>
                    }
                </MudItem>
            </MudGrid>
        </ChildContent>
    </MudExpansionPanel>

    <!-- Trivia Name -->
    <MudText Typo="Typo.subtitle1" Class="fw-bold">Sprint Name:</MudText>
    <MudTextField @bind-Value="_sprint.Name" Variant="Variant.Outlined" Class="mb-4 w-100" />

    <!-- Questions List -->
    <MudGrid>
        @foreach (var question in _sprint.Questions)
        {
            <MudItem xs="12" sm="6">
                <MudCard Class="mb-4" Outlined="true">
                    @if (question.IsTieBreaker)
                    {
                        <MudCardHeader>
                            <MudText Typo="Typo.subtitle1">
                                <span style="color:green">Tie-Breaker</span>
                            </MudText>
                        </MudCardHeader>
                    }
                    <MudCardContent>
                        <!-- Question Text -->
                        <MudText Class="mb-1 fw-bold">Question Text:</MudText>
                        <MudTextField @bind-Value="question.QuestionText"
                                      Variant="Variant.Outlined"
                                      Placeholder="Enter question text here..."
                                      Class="mb-3 w-100" />

                        <!-- Multiple-choice Answers -->
                        @if (!question.IsTieBreaker)
                        {
                            <MudText Typo="Typo.subtitle1">Select the correct answer:</MudText>

                            <!-- Single RadioGroup for the question -->
                            <MudRadioGroup T="Guid?"
                                           @key="@($"{question.Id}_{question.CorrectAnswerId ?? Guid.Empty}")" 
                                           Value="@question.CorrectAnswerId"
                                           ValueChanged="@(newValue => UpdateCorrectAnswer(question, newValue))">

                                @foreach (var answer in question.Answers)
                                {
                                    <div class="d-flex flex-grow-1 w-100">
                                        <MudTextField @bind-Value="answer.Text"
                                                      Variant="Variant.Outlined"
                                                      Placeholder="Enter answer text here..."
                                                      Class="flex-grow-1" />

                                        <!-- Radio for each answer -->
                                        <MudRadio T="Guid?"
                                                  Value="@(answer.Id)"
                                                  Color="Color.Primary"
                                                  Ripple="false"
                                                  Label="Correct Answer"
                                                  Class="ms-3" />
                                    </div>
                                }
                            </MudRadioGroup>
                        }
                        else
                        {
                            <!-- Tie-Breaker Answer -->
                            <MudText Class="mb-1 fw-bold">Tie-Breaker Answer:</MudText>
                            <MudTextField @bind-Value="question.TieBreakerAnswer.Text"
                                          Variant="Variant.Outlined"
                                          Placeholder="Enter tie-breaker answer here..."
                                          Class="mb-3 w-100" />
                        }

                        <!-- Media Upload -->
                        <MediaUpload Title="Upload Media (Image/Video)"
                                     ButtonText="Upload Media"
                                     InputId="@($"fileInput-{question.Id}")"
                                     Color="Color.Primary"
                                     AltText="Uploaded Media"
                                     MediaBase64="@question.UploadedMediaBase64"
                                     MediaName="@question.UploadedMediaName"
                                     OnMediaUploaded="@(args => HandleMediaUpload(args, question, false))" />

                        <!-- After Media Upload -->
                        <MediaUpload Title="Upload After Media (Image/Video)"
                                     ButtonText="Upload After Media"
                                     InputId="@($"afterFileInput-{question.Id}")"
                                     Color="Color.Secondary"
                                     AltText="Uploaded After Media"
                                     MediaBase64="@question.UploadedAfterMediaBase64"
                                     MediaName="@question.UploadedAfterMediaName"
                                     OnMediaUploaded="@(args => HandleMediaUpload(args, question, true))" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }

    </MudGrid>

    <MudButton Color="Color.Success" Variant="Variant.Filled" Class="mt-3"
               OnClick="CreateSprint">
        Create Sprint
    </MudButton>
</MudPaper>

@code {
    private Sprint _sprint = new();
    
    // OpenAI integration properties
    private string TriviaCategory { get; set; } = "Random";
    private int TriviaQuestionCount { get; set; } = 5;
    private bool IncludeTieBreaker { get; set; } = true;
    private bool IsGenerating { get; set; } = false;
    private string GenerationError { get; set; } = "";
    // JSON import properties
    private string JsonInput { get; set; } = "";
    private string JsonImportError { get; set; } = "";

    protected override void OnInitialized()
    {
        _sprint.Questions = InitializeQuestionsWithTieBreaker(5); // Initialize with 5 questions
    }

    private static List<Question> InitializeQuestionsWithTieBreaker(int count)
    {
        var questions = new List<Question>();

        // Add multiple-choice questions
        for (int i = 0; i < count; i++)
        {
            questions.Add(new Question
                {
                    IsTieBreaker = false,
                    QuestionText = "",
                    Answers =
                            [
                                new Answer(),
                    new Answer(),
                    new Answer(),
                    new Answer()
                            ]
                });
        }

        // Add a default tie-breaker question
        questions.Add(new Question
            {
                IsTieBreaker = true,
                QuestionText = "",
                TieBreakerAnswer = new Answer()
            });

        return questions;
    }

    private void HandleMediaUpload(MediaUploadEventArgs args, Question question, bool isAfterMedia)
    {
        if (!isAfterMedia)
        {
            question.UploadedMediaBase64 = args.Base64;
            question.UploadedMediaName = args.FileName;
        }
        else
        {
            question.UploadedAfterMediaBase64 = args.Base64;
            question.UploadedAfterMediaName = args.FileName;
        }
    }

    private void UpdateCorrectAnswer(Question question, Guid? selectedAnswerId)
    {
        question.CorrectAnswerId = selectedAnswerId;

        // Update IsCorrect for all answers in this question
        foreach (var answer in question.Answers)
        {
            answer.IsCorrect = answer.Id == selectedAnswerId;
        }

        StateHasChanged();
    }

    private async Task GenerateTriviaQuestions()
    {
        try
        {
            IsGenerating = true;
            GenerationError = "";
            
            var result = await TriviaService.GenerateTrivia(
                TriviaCategory, 
                TriviaQuestionCount, 
                IncludeTieBreaker);
            
            if (!string.IsNullOrEmpty(result.Error))
            {
                GenerationError = result.Error;
                return;
            }
            
            // Create a new sprint with generated questions
            _sprint.Name = TriviaMapper.GenerateSprintName(TriviaCategory);
            
            // Convert the trivia generation result to questions using the shared mapper
            _sprint.Questions = TriviaMapper.ConvertToQuestions(result);
        }
        catch (Exception ex)
        {
            GenerationError = $"Error generating trivia: {ex.Message}";
        }
        finally
        {
            IsGenerating = false;        
            await Task.Delay(1); 
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task CreateSprint()
    {
        // Check if the sprint has any data
        Debug.WriteLine($"Saving sprint: {_sprint.Name} with {_sprint.Questions.Count} questions");
    
        try {
            DbContext.Sprints.Add(_sprint);
            var changesCount = await DbContext.SaveChangesAsync();
        
            Debug.WriteLine($"SaveChanges returned: {changesCount} records affected");
        
            // Verify the sprint was saved
            var savedSprint = await DbContext.Sprints
                .Include(s => s.Questions)
                .ThenInclude(q => q.Answers)
                .FirstOrDefaultAsync(s => s.Name == _sprint.Name);
            
            Debug.WriteLine($"Verified sprint in DB: {savedSprint?.Name ?? "Not Found"} with {savedSprint?.Questions.Count ?? 0} questions");
        
            // Show toast notification
            Snackbar.Add($"Sprint created successfully! ID: {_sprint.Id}", Severity.Success, config =>
            {
                config.RequireInteraction = false;
                config.VisibleStateDuration = 10000; // 10 seconds
            });
        }
        catch (Exception ex) {
            Debug.WriteLine($"Error saving sprint: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }

        // Navigate to the home page
        NavigationManager.NavigateTo("/");
    }
    
    private async Task CopyExamplePromptToClipboard()
    {
        string examplePrompt = @"Generate 5 engaging trivia questions about random categories with 4 multiple-choice answers each.
For each question, clearly indicate which answer is correct. 
For the answers make sure the correct answers are spaced out randomly between all 4 options.

Also include one tie-breaker question in the style of 'The Price is Right' where the answer is a specific number or amount.
For this tie-breaker, provide the exact numerical answer.

Format your response as JSON with the following structure:
{
  ""questions"": [
    {
      ""questionText"": ""Question text here?"",
      ""answers"": [
        { ""text"": ""Answer 1"", ""isCorrect"": false },
        { ""text"": ""Answer 2"", ""isCorrect"": true },
        { ""text"": ""Answer 3"", ""isCorrect"": false },
        { ""text"": ""Answer 4"", ""isCorrect"": false }
      ]
    }
  ],
  ""tieBreaker"": {
    ""questionText"": ""How many X are there in Y?"",
    ""answer"": ""42""
  }
}";

        // Using JS Interop to copy to clipboard
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", examplePrompt);
        Snackbar.Add("Example prompt copied to clipboard!", Severity.Success);
    }

    private void ImportJsonTrivia()
    {
        try
        {
            // Reset error message
            JsonImportError = "";

            if (string.IsNullOrWhiteSpace(JsonInput))
            {
                JsonImportError = "JSON input is empty";
                return;
            }

            // Use the shared JSON parsing method
            var importData = JsonParserService.ParseTriviaJson(JsonInput);

            // Check for parsing errors
            if (!string.IsNullOrEmpty(importData.Error))
            {
                JsonImportError = importData.Error;
                return;
            }

            // Create a new sprint name if not already set
            if (string.IsNullOrWhiteSpace(_sprint.Name))
            {
                _sprint.Name = TriviaMapper.GenerateSprintName("Imported");
            }

            // Convert the trivia generation result to questions using the shared mapper
            _sprint.Questions = TriviaMapper.ConvertToQuestions(importData);

            // Show success message
            Snackbar.Add($"Successfully imported {_sprint.Questions.Count} questions!", Severity.Success);
        }
        catch (Exception ex)
        {
            JsonImportError = $"Error importing trivia: {ex.Message}";
        }
    }
}