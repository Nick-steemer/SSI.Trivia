@page "/presenter"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.EntityFrameworkCore
@using SSI.Trivia.Shared.DbContexts
@using SSI.Trivia.Shared.Models
@using SSI.Trivia.Shared.Components
@implements IAsyncDisposable
@inject TriviaDbContext DbContext
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Elevation="1" Class="px-4 py-6">
        @* Header with status information *@
        <MudStack Spacing="4">
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudText Typo="Typo.h4" Color="Color.Primary">Trivia Presenter</MudText>
                @if (SelectedSprint != null)
                {
                    <MudChip T="string" Color="@(IsSprintActive ? Color.Success : Color.Default)" 
                             Size="Size.Large" 
                             Icon="@(IsSprintActive ? Icons.Material.Filled.RadioButtonChecked : Icons.Material.Filled.RadioButtonUnchecked)">
                        @(IsSprintActive ? "Sprint Active" : "Sprint Inactive")
                    </MudChip>
                }
            </MudStack>
            
            @* Main content area with conditional rendering based on state *@
            @if (SelectedSprint == null)
            {
                <SprintSelection 
                    Sprints="@Sprints" 
                    OnSprintSelected="@OnSprintSelected" />
            }
            else
            {
                <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-4">
                    <MudTabPanel Text="Questions" Icon="@Icons.Material.Filled.Quiz">
                        <Questions 
                            Sprint="@SelectedSprint"
                            CurrentQuestion="@CurrentQuestion" 
                            CurrentQuestionIndex="@CurrentQuestionIndex"
                                       TotalQuestions="@TotalQuestions"
                                       CurrentQuestionNumber="@DisplayQuestionNumber"
                                       IsFirstQuestion="@IsFirstQuestion"
                            IsLastQuestion="@IsLastQuestion"
                            IsSprintActive="@IsSprintActive"
                            ShowTieBreakerQuestion="@ShowTieBreakerQuestion"
                            TieBreakerEligibilitySet="@TieBreakerEligibilitySet"
                            OnPreviousQuestion="@PreviousQuestion"
                            OnNextQuestion="@NextQuestion"
                            OnToggleSprintState="@ToggleSprintState"
                            OnSetupTieBreaker="@SetupTieBreakerEligibility" />
                    </MudTabPanel>

                    @if (CurrentQuestion?.IsTieBreaker == true && ShowTieBreakerQuestion)
                    {
                        <MudTabPanel Text="Tie Breaker" Icon="@Icons.Material.Filled.EmojiEvents">
                            <TieBreaker 
                                Question="@CurrentQuestion"
                                AllAnswersSubmitted="@AllTieBreakerAnswersSubmitted"
                                TargetValue="@TieBreakerTargetValue"
                                ShowWinnerSection="@ShowWinnerSection"
                                TieBreakerResults="@TieBreakerResults"
                                OnDetermineWinner="@ShowTieBreakerWinner"
                                OnTargetValueChanged="@((value) => TieBreakerTargetValue = value)" />
                        </MudTabPanel>
                    }

                    <MudTabPanel Text="Scores" Icon="@Icons.Material.Filled.Leaderboard">
                        <Scores 
                            Sprint="@SelectedSprint" 
                            ParticipantScores="@ParticipantScores"
                            IsLoading="@IsLoading"
                            SearchString="@SearchString"
                            OnSearchStringChanged="@((value) => SearchString = value)"
                            OnLoadScores="@LoadParticipantScores" />
                    </MudTabPanel>

                    <MudTabPanel Text="Review" Icon="@Icons.Material.Filled.Preview">
                        <Review 
                            Sprint="@SelectedSprint"
                            ShowCorrectAnswers="@ShowCorrectAnswers"
                            ShowParticipantScores="@ShowParticipantScores"
                            ShowTieBreakerQuestion="@ShowTieBreakerQuestion"
                            OnToggleCorrectAnswers="@ToggleShowCorrectAnswers"
                            OnToggleParticipantScores="@ToggleShowParticipantScores"
                            OnLoadScores="@LoadParticipantScores"
                            ParticipantScores="@ParticipantScores"
                            IsLoading="@IsLoading"
                            SearchString="@SearchString"
                            OnSearchStringChanged="@((value) => SearchString = value)" />
                    </MudTabPanel>
                </MudTabs>
            }
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private List<Sprint> Sprints { get; set; } = new();
    private Sprint? SelectedSprint { get; set; }
    private Question? CurrentQuestion { get; set; }
    private int CurrentQuestionIndex { get; set; } = 0;
    private HubConnection? hubConnection;
    private bool IsSprintActive { get; set; } = false;
    private bool IsLoading { get; set; } = false;
    private string SearchString { get; set; } = "";

    private bool IsReviewMode { get; set; } = false;
    private bool ShowCorrectAnswers { get; set; } = false;
    private bool ShowParticipantScores { get; set; } = false;
    private bool ShowTieBreakerQuestion { get; set; } = false;
    private bool AllTieBreakerAnswersSubmitted { get; set; } = false;
    private string TieBreakerTargetValue { get; set; } = string.Empty;
    private bool ShowWinnerSection { get; set; } = false;
    private List<TieBreakerResult> TieBreakerResults { get; set; } = new();
    private List<ParticipantScore> ParticipantScores { get; set; } = new();
    private bool TieBreakerEligibilitySet { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Sprints = await DbContext.Sprints
                .Include(g => g.Questions)
                .ThenInclude(q => q.Answers)
                .ToListAsync();

            var baseUrl = NavigationManager.BaseUri.Contains("0.0.0.1")
                ? "https://localhost:7296"
                : NavigationManager.BaseUri;

            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{baseUrl.TrimEnd('/')}/triviahub")
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On("AllTieBreakerAnswersSubmitted", OnAllTieBreakerAnswersSubmitted);
            hubConnection.On<List<int>>("TieDetected", OnTieDetected);
            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("JoinPresenterGroup");
        }
        catch (Exception ex)
        {
            Snackbar.Add("You are being redirected to the Admin page because the application ran into an issue with setting up the presenter page. This typically happens when there are no trivia sprints available.", Severity.Warning, config =>
            {
                config.RequireInteraction = false;
                config.VisibleStateDuration = 8000;
            });
            NavigationManager.NavigateTo("/Admin");
        }
    }

    private async Task OnSprintSelected(Sprint sprint)
    {
        SelectedSprint = sprint;
        if (SelectedSprint != null)
        {
            CurrentQuestionIndex = 0;
            ShowTieBreakerQuestion = false;
            UpdateCurrentQuestion();
            IsReviewMode = false;
            ShowCorrectAnswers = false;
            ShowParticipantScores = false;
            IsSprintActive = false;
            ParticipantScores.Clear();
            ShowWinnerSection = false;
            TieBreakerResults.Clear();
            AllTieBreakerAnswersSubmitted = false;
            TieBreakerTargetValue = string.Empty;
        }
        else
        {
            CurrentQuestion = null;
        }
    }

    private void UpdateCurrentQuestion()
    {
        if (SelectedSprint?.Questions is not { Count: > 0 })
        {
            CurrentQuestion = null;
            return;
        }

        var questions = SelectedSprint.Questions;
        if (CurrentQuestionIndex < questions.Count)
        {
            var question = questions[CurrentQuestionIndex];

            if (question.IsTieBreaker)
            {
                // Automatically show tie-breaker question
                ShowTieBreakerQuestion = true;
                
                // Reset tie-breaker state
                TieBreakerEligibilitySet = false;
                AllTieBreakerAnswersSubmitted = false;
                TieBreakerResults.Clear();
                ShowWinnerSection = false;
                TieBreakerTargetValue = string.Empty;
                
                // Automatically check for ties and set up eligibility
                _ = Task.Run(async () => await SetupTieBreakerEligibility());
            }

            CurrentQuestion = question;
        }
        else
        {
            CurrentQuestion = null;
        }
    }

    private async Task PreviousQuestion()
    {
        if (CurrentQuestionIndex > 0)
        {
            CurrentQuestionIndex--;
            UpdateCurrentQuestion();

            if (IsSprintActive && hubConnection != null)
            {
                await hubConnection.InvokeAsync("NavigateToQuestion", CurrentQuestionIndex);
            }
        }
    }

    private async Task NextQuestion()
    {
        if (SelectedSprint is not null &&
            CurrentQuestionIndex < SelectedSprint.Questions.Count - 1)
        {
            CurrentQuestionIndex++;
            UpdateCurrentQuestion();

            if (IsSprintActive && hubConnection != null)
            {
                await hubConnection.InvokeAsync("NavigateToQuestion", CurrentQuestionIndex);
            }
        }
    }

    private void ToggleShowCorrectAnswers()
    {
        ShowCorrectAnswers = !ShowCorrectAnswers;
    }

    private async Task ToggleShowParticipantScores()
    {
        ShowParticipantScores = !ShowParticipantScores;

        if (ShowParticipantScores && ParticipantScores.Count == 0 && SelectedSprint != null)
        {
            await LoadParticipantScores();
        }
    }

    private async Task LoadParticipantScores()
    {
        if (SelectedSprint == null) return;

        IsLoading = true;
        ParticipantScores.Clear();

        try
        {
            var participantAnswers = await DbContext.ParticipantAnswers
                .Where(pa => SelectedSprint.Questions.Select(q => q.Id).Contains(pa.QuestionId))
                .Include(pa => pa.Participant)
                .ToListAsync();

            var questionsWithCorrectAnswers = SelectedSprint.Questions
                .Where(q => !q.IsTieBreaker)
                .Select(q => new
                {
                    QuestionId = q.Id,
                    CorrectAnswerId = q.Answers.FirstOrDefault(a => a.IsCorrect)?.Id
                })
                .ToList();

            var participantGroups = participantAnswers
                .GroupBy(pa => pa.ParticipantId);

            var scores = new List<ParticipantScore>();

            foreach (var group in participantGroups)
            {
                var participant = group.First().Participant;

                int correctAnswers = 0;
                int score = 0;

                foreach (var answer in group)
                {
                    var questionInfo = questionsWithCorrectAnswers
                        .FirstOrDefault(q => q.QuestionId == answer.QuestionId);

                    if (questionInfo != null && answer.SelectedAnswerId == questionInfo.CorrectAnswerId)
                    {
                        correctAnswers++;
                        score += 10;
                    }
                }

                scores.Add(new ParticipantScore
                    {
                        ParticipantId = participant.Id,
                        Name = participant.Name,
                        Score = score,
                        CorrectAnswers = correctAnswers,
                        TotalQuestions = questionsWithCorrectAnswers.Count
                    });
            }

            var rankedScores = scores.OrderByDescending(s => s.Score).ToList();

            int currentRank = 1;
            int currentScore = -1;
            int sameRankCount = 0;

            for (int i = 0; i < rankedScores.Count; i++)
            {
                if (rankedScores[i].Score != currentScore)
                {
                    currentRank = i + 1 - sameRankCount;
                    currentScore = rankedScores[i].Score;
                    sameRankCount = 0;
                }
                else
                {
                    sameRankCount++;
                }

                rankedScores[i].Rank = currentRank;
            }

            ParticipantScores = rankedScores;
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to load participant scores.", Severity.Error);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task ToggleSprintState()
    {
        if (hubConnection == null || SelectedSprint == null) return;

        if (!IsSprintActive)
        {
            IsSprintActive = true;
            await StartSprint(SelectedSprint);
        }
        else
        {
            IsSprintActive = false;
            await EndSprint();
        }
    }

    private async Task StartSprint(Sprint sprint)
    {
        if (hubConnection != null)
        {
            await hubConnection.InvokeAsync("StartSprint", sprint);
            IsSprintActive = true;
            Snackbar.Add("Sprint started! Participants can now join.", Severity.Success);
        }
    }

    private async Task EndSprint()
    {
        if (hubConnection != null)
        {
            await hubConnection.InvokeAsync("CloseSprint");
            IsSprintActive = false;
            Snackbar.Add("Sprint ended. Participants can no longer submit answers.", Severity.Warning);
        }
    }

    private async Task SetupTieBreakerEligibility()
    {
        if (SelectedSprint == null || hubConnection == null) return;

        if (ParticipantScores.Count == 0)
        {
            await LoadParticipantScores();
        }

        if (ParticipantScores.Count == 0) return;

        int highestScore = ParticipantScores.Max(p => p.Score);
        var eligibleParticipants = ParticipantScores
            .Where(p => p.Score == highestScore)
            .ToList();

        if (eligibleParticipants.Count > 1)
        {
            foreach (var participant in eligibleParticipants)
            {
                await hubConnection.InvokeAsync("SetTieBreakerEligibilityForParticipant", participant.ParticipantId, true);
            }

            TieBreakerEligibilitySet = true;
            ShowTieBreakerQuestion = true;

            var eligibleNames = string.Join(", ", eligibleParticipants.Select(p => p.Name));
            Snackbar.Add($"Tie-breaker set up for: {eligibleNames}", Severity.Info);
            
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            var winner = eligibleParticipants.FirstOrDefault();
            Snackbar.Add($"The winner is {winner?.Name} with {highestScore} points. No tie-breaker needed!", Severity.Success);
            TieBreakerEligibilitySet = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private bool IsFirstQuestion => CurrentQuestionIndex == 0;
    private bool IsLastQuestion => SelectedSprint?.Questions != null && CurrentQuestionIndex >= SelectedSprint.Questions.Count - 1;
    private int CurrentQuestionNumber => CurrentQuestionIndex + 1;
    private int TotalQuestions => SelectedSprint?.Questions?.Count(q => !q.IsTieBreaker) ?? 0;
    private int DisplayQuestionNumber => SelectedSprint?.Questions
    .Where(q => !q.IsTieBreaker)
    .ToList()
    .FindIndex(q => q.Id == CurrentQuestion?.Id) + 1 ?? 0;

    private async Task OnAllTieBreakerAnswersSubmitted()
    {
        AllTieBreakerAnswersSubmitted = true;
        await InvokeAsync(StateHasChanged);
        Snackbar.Add("All eligible participants have submitted their tie-breaker answers!", Severity.Success);
    }

    private async Task ShowTieBreakerWinner()
    {
        if (string.IsNullOrWhiteSpace(TieBreakerTargetValue) || !int.TryParse(TieBreakerTargetValue, out int targetValue))
        {
            Snackbar.Add("Please enter a valid number as the correct answer.", Severity.Error);
            return;
        }

        if (hubConnection != null)
        {
            var results = await hubConnection.InvokeAsync<List<TieBreakerResult>>("GetTieBreakerResults", targetValue);
            TieBreakerResults.Clear();

            foreach (var result in results)
            {
                var participant = await DbContext.Participants.FirstOrDefaultAsync(p => p.Id == result.ParticipantId);
                if (participant != null)
                {
                    TieBreakerResults.Add(new TieBreakerResult
                        {
                            ParticipantId = result.ParticipantId,
                            ParticipantName = participant.Name,
                            Answer = result.Answer
                        });
                }
            }

            ShowWinnerSection = true;
            await InvokeAsync(StateHasChanged);
            
            if (TieBreakerResults.Any())
            {
                var winner = TieBreakerResults.First();
                Snackbar.Add($"The winner is {winner.ParticipantName}!", Severity.Success);
            }
        }
    }

    private async Task OnTieDetected(List<int> tiedParticipantIds)
    {
        if (tiedParticipantIds.Count > 1)
        {
            // Load participant scores if not already loaded
            if (ParticipantScores.Count == 0)
            {
                await LoadParticipantScores();
            }
            
            // Find the names of the tied participants
            var tiedParticipantNames = ParticipantScores
                .Where(p => tiedParticipantIds.Contains(p.ParticipantId))
                .Select(p => p.Name)
                .ToList();
                
            string participantsList = string.Join(", ", tiedParticipantNames);
            
            Snackbar.Add($"Tie detected among participants: {participantsList}. Navigate to tie-breaker question!", Severity.Warning);
            
            // Find and navigate to the tie-breaker question
            if (SelectedSprint?.Questions != null)
            {
                for (int i = 0; i < SelectedSprint.Questions.Count; i++)
                {
                    if (SelectedSprint.Questions[i].IsTieBreaker)
                    {
                        CurrentQuestionIndex = i;
                        UpdateCurrentQuestion();
                        // Show tie-breaker question tab
                        ShowTieBreakerQuestion = true;
                        TieBreakerEligibilitySet = true;
                        StateHasChanged();
                        break;
                    }
                }
            }
        }
    }
}